resource "aws_s3_bucket" "this" {
  count  = var.service_components.s3bucket.enabled ? 1 : 0
  bucket = local.bucket_name
  tags   = local.tags

  lifecycle {
    prevent_destroy = true
  }
}

# resource "aws_s3_bucket_acl" "this" {
#   count  = var.service_components.s3bucket.enabled ? 1 : 0
#   bucket = aws_s3_bucket.this[0].id
#   acl    = "private"
# }

resource "aws_s3_bucket_public_access_block" "this" {
  count                   = var.service_components.s3bucket.enabled ? 1 : 0
  bucket                  = aws_s3_bucket.this[0].id
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

resource "aws_s3_bucket_server_side_encryption_configuration" "this" {
  count  = var.service_components.s3bucket.enabled ? 1 : 0
  bucket = aws_s3_bucket.this[0].bucket
  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm = "AES256"
      # TODO: added as tech debt to security exceptions https://surprisehr.atlassian.net/browse/DEVOPS-2307
      # kms_master_key_id = local.core_kms_keys.s3_encryption
    }
  }
}

data "aws_iam_policy_document" "s3" {
  count = var.service_components.s3bucket.enabled ? 1 : 0
  statement {
    sid    = "S3Bucket"
    effect = "Allow"
    actions = [
      "s3:ListBucket",
      "s3:GetBucketLocation",
      "s3:ListBucketMultipartUploads"
    ]
    resources = [aws_s3_bucket.this[0].arn]
  }

  statement {
    sid    = "S3Objects"
    effect = "Allow"
    actions = [
      "s3:PutObject",
      "s3:PutObjectAcl",
      "s3:GetObject",
      "s3:GetObjectVersion",
      "s3:DeleteObject",
      "s3:DeleteObjectVersion",
      "s3:AbortMultipartUpload",
      "s3:CompleteMultipartUpload",
      "s3:ListMultipartUploadParts"
    ]
    resources = ["${aws_s3_bucket.this[0].arn}/*"]
  }
}

resource "aws_iam_policy" "s3" {
  count       = var.service_components.s3bucket.enabled ? 1 : 0
  name        = "${var.eks.cluster_name}-sa-${var.service_name}-s3"
  description = "EKS ${local.eks.cluster_name} SA ${var.service_name} policy"
  policy      = data.aws_iam_policy_document.s3[0].json
  tags        = local.tags
}

resource "aws_iam_role_policy_attachment" "s3" {
  count      = var.service_components.s3bucket.enabled ? 1 : 0
  policy_arn = aws_iam_policy.s3[0].arn
  role       = aws_iam_role.sa[0].name
}
