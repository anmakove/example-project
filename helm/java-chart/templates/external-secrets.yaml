{{- $fullname := (include "app.fullname" .) }}
{{- $shortname := (include "app.shortname" .) }}
{{- $vaultrole := (include "app.vaultRole" .) }}
{{- $envprefix := (include "app.envprefix" .) }}
{{- $labels := (include "app.labels" .) }}

{{/* use loop to generate secrets for different workloads (api, migration job, cronjobs) */}}
{{- $cronJobs := list }}
{{- $w := dict }}
{{- range keys .Values.cronJobs }}
  {{- $cronJobs = printf "cronjob_%s" . | append $cronJobs }}
{{- end }}
{{- $workloads := list "api" "migration" | concat $cronJobs }}
{{- range $wName := $workloads }}
  {{- if hasPrefix "cronjob_" $wName }}
    {{- $wName = trimPrefix "cronjob_" $wName }}
    {{- $w = get $.Values.cronJobs $wName }}
  {{- else }}
    {{- $w = get $.Values $wName }}
  {{- end }}
  {{- if $w.enabled }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name:  "{{ $fullname }}-{{ $wName }}-es"
  labels:
{{ $labels | indent 4 }}
  annotations:
    helm.sh/hook: "pre-install, pre-upgrade"
    helm.sh/hook-delete-policy: "before-hook-creation"
    helm.sh/hook-weight: "-1"
spec:
  refreshInterval: {{ $w.externalSecrets.refreshInterval }}
  secretStoreRef:
    name: "{{ $fullname }}-es"
    kind: SecretStore
  target:
    # k8s secret name itself
    name: "{{ $fullname }}-{{ $wName }}-es"
    creationPolicy: Owner
  data:
    {{- range $item := $w.externalSecrets.secretEnvsMap }}
    {{- if and ($item.key) ($item.keyPath) }}
      {{- fail "Both 'key' and 'keyPath' are set for the secretEnvsMap item!" }}
    {{- else if $item.key }}
    - remoteRef:
        key: services/{{ $.Values.env }}/core/{{ $fullname }}/{{ $item.key }}
        property: {{ $item.property }}
      secretKey: {{ $item.secretKey }}
    {{- else if $item.keyPath }}
    - remoteRef:
        key: services/{{ $.Values.env }}/{{ $item.keyPath }}
        property: {{ $item.property }}
      secretKey: {{ $item.secretKey }}
    {{- end }}
    {{- end }}
    {{- range $item := $w.externalSecrets.secretEnvs }}
    - remoteRef:
        key: services/{{ $.Values.env }}/core/{{ $fullname }}/{{ $item }}
        property: {{ $item }}
      secretKey: {{ $item }}
    {{- end }}
    {{- if $w.externalSecrets.rollbarEnabled }}
    - remoteRef:
        key: services/{{ $.Values.env }}/common/rollbar-access-tokens
        property: {{ $fullname }}
      secretKey: SURPRISE_COMMONS_WEB_ROLLBAR_TOKEN
    {{- end }}
    {{- if $w.externalSecrets.intDbEnabled }}
    - remoteRef:
        key: services/{{ $.Values.env }}/core/{{ $fullname }}/db_details
        property: full_url
      secretKey: {{ $envprefix }}POSTGRESQL_URL
    - remoteRef:
        key: services/{{ $.Values.env }}/core/{{ $fullname }}/db_details
        property: full_url
      secretKey: {{ $envprefix }}POSTGRESQL_URL_MASTER
    - remoteRef:
        key: services/{{ $.Values.env }}/core/{{ $fullname }}/db_details
        property: replica_full_url
      secretKey: {{ $envprefix }}POSTGRESQL_URL_REPLICA
    - remoteRef:
        key: services/{{ $.Values.env }}/core/{{ $fullname }}/db_details
        property: service_user_username
      secretKey: {{ $envprefix }}POSTGRESQL_USER_NAME
    - remoteRef:
        key: services/{{ $.Values.env }}/core/{{ $fullname }}/db_details
        property: service_user_password
      secretKey: {{ $envprefix }}POSTGRESQL_USER_PASSWORD
    {{- end }}
    {{- if $w.externalSecrets.kafkaEnabled }}
    - remoteRef:
        key: services/{{ $.Values.env }}/common/kafka-users/{{ $shortname }}
        property: username
      secretKey: {{ $envprefix }}KAFKA_USER_NAME
    - remoteRef:
        key: services/{{ $.Values.env }}/common/kafka-users/{{ $shortname }}
        property: password
      secretKey: {{ $envprefix }}KAFKA_USER_PASSWORD
    - remoteRef:
        key: services/{{ $.Values.env }}/common/kafka-urls
        property: broker-urls
      secretKey: {{ $envprefix }}KAFKA_URL
    {{- end }}
    {{- if $w.externalSecrets.redisEnabled }}
    - remoteRef:
        key: services/{{ $.Values.env }}/common/core-api-cache
        property: redis_host
      secretKey: {{ $envprefix }}SPRING_REDIS_HOST
    - remoteRef:
        key: services/{{ $.Values.env }}/common/core-api-cache
        property: redis_replica_host
      secretKey: {{ $envprefix }}REDIS_REPLICA_HOST
    - remoteRef:
        key: services/{{ $.Values.env }}/common/core-api-cache
        property: redis_port
      secretKey: {{ $envprefix }}SPRING_REDIS_PORT
    - remoteRef:
        key: services/{{ $.Values.env }}/common/core-api-cache
        property: redis_password
      secretKey: {{ $envprefix }}SPRING_REDIS_PASSWORD
    - remoteRef:
        key: services/{{ $.Values.env }}/common/core-api-cache-db-mapping
        property: {{ $fullname }}
      secretKey: {{ $envprefix }}SPRING_REDIS_DATABASE
    {{- end }}
    {{- if $w.externalSecrets.cognitoEnabled }}
    - remoteRef:
        key: services/{{ $.Values.env }}/common/cognito-accounts-pool/pool_id
        property: pool_id
      secretKey: {{ $envprefix }}AWS_COGNITO_ACCOUNTS_POOL_ID
    - remoteRef:
        key: services/{{ $.Values.env }}/common/cognito-accounts-pool/pool_domain
        property: pool_domain
      secretKey: {{ $envprefix }}AWS_COGNITO_ACCOUNTS_POOL_DOMAIN
    - remoteRef:
        key: services/{{ $.Values.env }}/common/cognito-accounts-pool/pool_redirect_url
        property: pool_redirect_url
      secretKey: {{ $envprefix }}AWS_COGNITO_ACCOUNTS_POOL_REDIRECT_URL
    - remoteRef:
        key: services/{{ $.Values.env }}/common/cognito-accounts-pool/main_client_id
        property: main_client_id
      secretKey: {{ $envprefix }}AWS_COGNITO_ACCOUNTS_MAIN_CLIENT_ID
    - remoteRef:
        key: services/{{ $.Values.env }}/common/cognito-accounts-pool/main_client_secret
        property: main_client_secret
      secretKey: {{ $envprefix }}AWS_COGNITO_ACCOUNTS_MAIN_CLIENT_SECRET
    {{- end }}
    {{- if $w.externalSecrets.intTokenEnabled }}
    - remoteRef:
        key: services/{{ $.Values.env }}/common/internal-token-signature-secret
        property: secret-key
      {{- if $w.externalSecrets.intTokenEnvOverride }}
      secretKey: {{ $w.externalSecrets.intTokenEnvOverride }}
      {{- else }}
      secretKey: SURPRISE_COMMONS_SECURITY_INTERNAL_TOKEN_SIGNATURE_SECRET
      {{- end }}
    {{- end }}
    {{- if $.Values.app.datadog.enabled }}
    - remoteRef:
        key: services/{{ $.Values.env }}/common/datadog
        property: trace-sample-rate
      secretKey: DD_TRACE_SAMPLE_RATE
    - remoteRef:
        key: services/{{ $.Values.env }}/common/datadog
        property: dogstatsd-port
      secretKey: DD_JMXFETCH_STATSD_PORT
    {{- end }}
  {{- end }}
{{- end }}
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: "{{ $fullname }}-es"
  labels:
{{ $labels | indent 4 }}
  annotations:
    helm.sh/hook: "pre-install, pre-upgrade"
    helm.sh/hook-delete-policy: "before-hook-creation"
    helm.sh/hook-weight: "-2"
spec:
  provider:
    vault:
      server: https://vault.svc.example.com
      path: "secret"
      version: "v2"
      auth:
        # Authenticate against Vault using a Kubernetes ServiceAccount
        # token stored in a Secret.
        # https://www.vaultproject.io/docs/auth/kubernetes
        kubernetes:
          # Path where the Kubernetes authentication backend is mounted in Vault
          mountPath: core-{{ .Values.env }}
          # A required field containing the Vault Role to assume.
          role: "{{ $vaultrole }}"
          # Optional service account field containing the name
          # of a kubernetes ServiceAccount
          serviceAccountRef:
            name: "{{ $fullname }}"
